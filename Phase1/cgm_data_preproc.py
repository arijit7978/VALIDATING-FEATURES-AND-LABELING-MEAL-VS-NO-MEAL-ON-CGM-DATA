# -*- coding: utf-8 -*-
"""CGM_Data_PreProc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pWIt2nQYgaexdT5YDGUfetWxqEFGzK4t
"""

import pandas as pd

df_timestamps1 =  pd.read_csv('/CGMDatenumLunchPat1.csv') 
df_glucoseLevels1 = pd.read_csv('/CGMSeriesLunchPat1.csv')
df_timestamps2 =  pd.read_csv('/CGMDatenumLunchPat2.csv')
df_glucoseLevels2 = pd.read_csv('/CGMSeriesLunchPat2.csv')
df_timestamps3 =  pd.read_csv('/CGMDatenumLunchPat3.csv')
df_glucoseLevels3 = pd.read_csv('/CGMSeriesLunchPat3.csv')
df_timestamps4 =  pd.read_csv('/CGMDatenumLunchPat4.csv')
df_glucoseLevels4 = pd.read_csv('/CGMSeriesLunchPat4.csv')
df_timestamps5 =  pd.read_csv('/CGMDatenumLunchPat5.csv')
df_glucoseLevels5 = pd.read_csv('/CGMSeriesLunchPat5.csv')


df_insulin_bolus1 =  pd.read_csv('/InsulinBolusLunchPat1.csv')


df_glucoseLevels = pd.concat([df_glucoseLevels1, df_glucoseLevels2,df_glucoseLevels3,df_glucoseLevels5])
df_timestamps=pd.concat([df_timestamps1,df_timestamps2,df_timestamps3,df_timestamps5])

df_features = pd.DataFrame()


df_timestamps = df_timestamps.rename(columns={'cgmDatenum_ 9':'cgmDatenum_9', 'cgmDatenum_ 8':'cgmDatenum_8',
       'cgmDatenum_ 7':'cgmDatenum_7', 'cgmDatenum_ 6':'cgmDatenum_6', 'cgmDatenum_ 5':'cgmDatenum_5', 'cgmDatenum_ 4':'cgmDatenum_4',
       'cgmDatenum_ 3':'cgmDatenum_3', 'cgmDatenum_ 2':'cgmDatenum_2', 'cgmDatenum_ 1':'cgmDatenum_1'})

df_glucoseLevels.fillna(0, inplace = True)
df_timestamps.fillna(0,inplace=True)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas  as pd

for i in range(150):
  s = pd.Series(df_glucoseLevels.iloc[i]).autocorr(lag=4)
  q = pd.Series(df_glucoseLevels.iloc[i]).autocorr(lag=6)
  p = pd.Series(df_glucoseLevels.iloc[i]).autocorr(lag=8)
  df_features.at[i,'Correlation_With_Lag_4']=s
  df_features.at[i,'Correlation_With_Lag_6']=q
  df_features.at[i,'Correlation_With_Lag_8']=p



import numpy as np
import warnings


for i in range(150):
  coefs = np.polyfit(df_timestamps.iloc[i],df_glucoseLevels.iloc[i], 4)
  coefs1 = np.polyfit(df_timestamps.iloc[i],df_glucoseLevels.iloc[i], 2)
  coefs2 = np.polyfit(df_timestamps.iloc[i],df_glucoseLevels.iloc[i], 3)
  coefs3 = np.polyfit(df_timestamps.iloc[i],df_glucoseLevels.iloc[i], 1)
  
  df_features.at[i,'polyFit_4Degree_First_Coef']=coefs[0]
  df_features.at[i,'polyFit_4Degree_Sec_Coef']=coefs[1]
  df_features.at[i,'polyFit_4Degree_Third_Coef']=coefs[2]
  df_features.at[i,'polyFit_4Degree_Fourth_Coef']=coefs[3]
  df_features.at[i,'polyFit_4Degree_Five_Coef']=coefs[4]
  df_features.at[i,'polyFit_2Degree_First_Coef']=coefs1[0]
  df_features.at[i,'polyFit_2Degree_Sec_Coef']=coefs1[1]
  df_features.at[i,'polyFit_2Degree_Third_Coef']=coefs1[2]
  df_features.at[i,'polyFit_3Degree_First_Coef']=coefs2[0]
  df_features.at[i,'polyFit_3Degree_Sec_Coef']=coefs2[1]
  df_features.at[i,'polyFit_3Degree_Third_Coef']=coefs2[2]
  df_features.at[i,'polyFit_3Degree_Fourth_Coef']=coefs2[3]
  df_features.at[i,'polyFit_1Degree_First_Coef']=coefs3[0]
  df_features.at[i,'polyFit_1Degree_Sec_Coef']=coefs3[1]

  print(coefs)



for i in range(150):
  max_Time = 15
  first = float(df_features.at[i,'velocity_for_roll_3'])
  sec= float(df_features.at[i,'velocity_for_roll_4'])
  third= float(df_features.at[i,'velocity_for_roll_5'])
  fourth= float(df_features.at[i,'velocity_for_roll_6'])
  if first < sec:
    max_Time = 20
  if third > sec:
    max_Time = 25
  if fourth >third:
    max_Time = 30
  df_features.at[i,'max_Velocity_Time'] = max_Time

rolling = [3,4,5,6]

print(df_glucoseLevels.iloc[0])
for roll in rolling:
  for i in range(150):
    currRow = df_glucoseLevels.iloc[i]
    np_array = np.array(currRow)
    max_roll =-99999
    for j in range(len(currRow)-roll-1):
      min_value = np_array[j]
      max_value = np_array[j+roll]
      #print(max_value-min_value)
      max_roll = max((max_value-min_value)/(roll*5),max_roll)    
    value = 'velocity_for_roll_'+ str(roll)
    df_features.at[i,value]=max_roll

from scipy.signal import find_peaks_cwt
cwts = find_peaks_cwt(df_glucoseLevels.iloc[1][:-1], np.arange(10,15), noise_perc=0.1)
print(cwts)
print(df_glucoseLevels.iloc[1])

DF_FEATURES_MATRIX =df_features [['max_Velocity_Time', 'PSD_First_Peak',
       'PSD_Sec_Peak', 'PSD_Third_Peak', 'PSD_Fourth_Peak', 'PSD_Fifth_Peak',
       'PSD_Sixth_Peak', 'PSD_seventh_Peak', 'PSD_eight_Peak',
       'polyFit_4Degree_First_Coef', 'polyFit_4Degree_Sec_Coef',
       'polyFit_4Degree_Third_Coef', 'polyFit_4Degree_Fourth_Coef',
       'polyFit_4Degree_Five_Coef', 'polyFit_2Degree_First_Coef',
       'polyFit_2Degree_Sec_Coef', 'polyFit_2Degree_Third_Coef',
       'polyFit_3Degree_First_Coef', 'polyFit_3Degree_Sec_Coef',
       'polyFit_3Degree_Third_Coef', 'polyFit_3Degree_Fourth_Coef',
       'polyFit_5Degree_First_Coef', 'polyFit_5Degree_Sec_Coef',
       'polyFit_5Degree_Third_Coef', 'polyFit_5Degree_Fourth_Coef',
       'polyFit_5Degree_Fifth_Coef', 'polyFit_5Degree_Six_Coef',
       'Correlation_With_Lag_2', 'Correlation_With_Lag_3',
       'Correlation_With_Lag_5', 'Correlation_With_Lag_4',
       'Correlation_With_Lag_6', 'Correlation_With_Lag_8']]

DF_FEATURES_MATRIX

import numpy as np
from matplotlib import pyplot as plt



#freqs, psd = signal.welch(df_glucoseLevels.iloc[10])
#array= psd[:8]
#print(array)
#print(psd)

for i in range(150):
  ps = np.abs(np.fft.fft(df_glucoseLevels.iloc[i]))**2
  ps.sort()
  values = ps[23:]
  df_features.at[i,'PSD_First_Peak'] = values[7]
  df_features.at[i,'PSD_Sec_Peak'] = values[6]
  df_features.at[i,'PSD_Third_Peak'] = values[5]
  df_features.at[i,'PSD_Fourth_Peak'] = values[4]
  df_features.at[i,'PSD_Fifth_Peak'] = values[3]
  df_features.at[i,'PSD_Sixth_Peak'] = values[2]
  df_features.at[i,'PSD_seventh_Peak'] = values[1]
  df_features.at[i,'PSD_eight_Peak'] = values[0]

df_features.columns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

df_timestamps = df_timestamps[df_timestamps.columns[::-1]]
dataRow = df_features.iloc[0]
dataPoint = []

dataPoint.append(dataRow['polyFit_2Degree_First_Coef'])
dataPoint.append(dataRow['polyFit_2Degree_Sec_Coef'])
dataPoint.append(dataRow['polyFit_2Degree_Third_Coef'])

print(dataPoint)

plt.plot(df_timestamps.iloc[3],df_glucoseLevels.iloc[3])

plt.plot()

shifted = df_glucoseLevels.iloc[120].shift(-2,axis=0)

# print(shifted)
shifted.fillna(0, inplace = True)
plt.plot(shifted.values,label='shifted by 2')
plt.plot(df_glucoseLevels.iloc[120].values,label='original')
plt.legend()
plt.show()

df_features

# values.append(df_features.iloc[0]['polyFit_2Degree_First_Coef'])
# values.append(df_features.iloc[0]['polyFit_2Degree_Sec_Coef'])
# values.append(df_features.iloc[0]['polyFit_2Degree_Third_Coef'])

f = []
j = 1

for i in df_timestamps.iloc[j]:
  #print(i)
  #print(df_features.iloc[j]['polyFit_3Degree_Fourth_Coef'])
  f.append(df_features.iloc[j]['polyFit_3Degree_Fourth_Coef']*(i**3) + df_features.iloc[j]['polyFit_3Degree_Third_Coef']*(i**2) + df_features.iloc[j]['polyFit_3Degree_Sec_Coef'] *(i) + df_features.iloc[j]['polyFit_3Degree_First_Coef'])

print(f)
plt.plot(df_timestamps.iloc[j],f,label='polyfit')
plt.plot(df_timestamps.iloc[j],df_glucoseLevels.iloc[j],label='actual data')
plt.legend()
plt.show()

for column in df_features.columns:
  df_features[column] =  df_features[column]/ df_features[column].max()
df_features.fillna(0)

from sklearn.decomposition import PCA
pca = PCA(n_components=5)
principalComponents = pca.fit_transform(df_features)
print(principalComponents)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2','principal component 3', 'principal component 4','principal component 5'])

i=8
ps = np.abs(np.fft.fft(df_glucoseLevels.iloc[i]))**2
#ps.sort()
#values = ps[23:]


#print(1/df_timestamps.iloc[i])
plt.plot(1/df_timestamps.iloc[i],ps,label='PSD OF DATA')
#plt.plot(df_timestamps.iloc[i],df_glucoseLevels.iloc[i],label='ORIGINAL CGM DATA')
plt.xlabel('time')
plt.legend()
plt.show()

import pandas as pd

df_Insulin1 =  pd.read_csv('./InsulinBolusLunchPat1.csv') 
df_InsulinTime1 = pd.read_csv('./InsulinDatenumLunchPat1.csv')
df_Insulin2 =  pd.read_csv('./InsulinBolusLunchPat2.csv')
df_InsulinTime2 = pd.read_csv('./InsulinDatenumLunchPat2.csv')
df_Insulin3 =  pd.read_csv('./InsulinBolusLunchPat3.csv')
df_InsulinTime3 = pd.read_csv('./InsulinDatenumLunchPat3.csv')
df_Insulin4 =  pd.read_csv('./InsulinBolusLunchPat4.csv')
df_InsulinTime4 = pd.read_csv('./InsulinDatenumLunchPat4.csv')
df_Insulin5 =  pd.read_csv('./InsulinBolusLunchPat5.csv')
df_InsulinTime5 = pd.read_csv('./InsulinDatenumLunchPat5.csv')


df_Insulin = pd.concat([df_Insulin1, df_Insulin2,df_Insulin3,df_Insulin5])
df_InsulinTime=pd.concat([df_InsulinTime1,df_InsulinTime2,df_InsulinTime3,df_InsulinTime5])

principalDf

import numpy as np
import warnings
row = df_features.iloc[0]
print(row)
f =[]
for i in df_timestamps.iloc[0]:
  f.append(row['polyFit_3Degree_First_Coef']*(i**3) + row['polyFit_3Degree_Sec_Coef']*(i**2) +row['polyFit_3Degree_Third_Coef']*(i) +row['polyFit_3Degree_Fourth_Coef']) 

plt.plot(df_timestamps.iloc[0],f,label='polyfit')
plt.plot(df_timestamps.iloc[0],df_glucoseLevels.iloc[0],label='original CGM')
plt.legend()
plt.show()

for i in range(150):
  df_features.at[i,'Avg_Time_To_Reach_Peak_Where_Meal_Was_Detec'] = list[i][0]

df_features

statisticalFeatures = pd.read_csv('./Statistical_Feature.csv')

statisticalFeatures

statisticalFeatures.columns

for i in range(150):
  df_features.at[i,'windowed_mean_1'] = statisticalFeatures.at[i,'windowed_mean_1']
  df_features.at[i,'windowed_mean_2'] = statisticalFeatures.at[i,'windowed_mean_2']
  df_features.at[i,'windowed_mean_3'] = statisticalFeatures.at[i,'windowed_mean_3']
  df_features.at[i,'windowed_mean_4'] = statisticalFeatures.at[i,'windowed_mean_4']
  df_features.at[i,'windowed_mean_5'] = statisticalFeatures.at[i,'windowed_mean_5']
  df_features.at[i,'windowed_var_1'] = statisticalFeatures.at[i,'windowed_var_1']
  df_features.at[i,'windowed_var_2'] = statisticalFeatures.at[i,'windowed_var_2']
  df_features.at[i,'windowed_var_3'] = statisticalFeatures.at[i,'windowed_var_3']
  df_features.at[i,'windowed_var_4'] = statisticalFeatures.at[i,'windowed_var_4']
  df_features.at[i,'windowed_var_5'] = statisticalFeatures.at[i,'windowed_var_5']

window=2

print(df_glucoseLevels.rolling(window,axis=1).apply(lambda x: (x[-1]-x[-0])/(window*5)))

df_features.shape

df_Feature_Matrix = df_features

df_Feature_Matrix

from sklearn.preprocessing import StandardScaler

df_Feature_Matrix = StandardScaler().fit_transform(df_Feature_Matrix)

df_Feature_Matrix.fillna(0,inplace=True)

import pandas as pd
# normalize data
from sklearn import preprocessing
data_scaled = pd.DataFrame(preprocessing.scale(df_Feature_Matrix),columns = df_Feature_Matrix.columns) 

# PCA
pca = PCA(n_components=5)
val=pca.fit_transform(data_scaled)
print(val.shape)
# Dump components relations with features:
pca_Data_Frame = pd.DataFrame(pca.components_,columns=data_scaled.columns,index = ['PC-1','PC-2','PC-3','PC-4','PC-5'])
pca_Data_Frame.to_csv('PCA_FEATURES_MATRIX.csv')

pca_Data_Frame.idxmin(axis=1)

plt.scatter(range(150), val[:,4], marker='o', color = 'b',label='Fifth PCA');

plt.legend()
plt.xlabel('Time Series')
plt.ylabel('Variances')
plt.show()

from sklearn.preprocessing import StandardScaler
features = list(df_Feature_Matrix)
x = df_Feature_Matrix.loc[:, features].values
x = StandardScaler().fit_transform(x)
from sklearn.decomposition import PCA
pca = PCA(n_components=5)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data = principalComponents, columns = ['principal component 1', 'principal component 2','principal component 3','principal component 4','principal component 5'])

explained_variance = pca.explained_variance_ratio_
print(explained_variance)
print(pca.components_)
print(principalDf)

from sklearn.preprocessing import StandardScaler
df_features.fillna(0,inplace=True)
features = list(df_features)
x = df_features.loc[:, features].values
x = StandardScaler().fit(x)
from sklearn.decomposition import PCA
pca = PCA(n_components=5)
principalComponents = pca.fit_transform(x)
#principalDf = pd.DataFrame(data = principalComponents, columns = ['principal component 1', 'principal component 2','principal component 3','principal component 4','principal component 5'])
#print(principalDf)
pca.fit_transform(x)

from sklearn.decomposition import PCA
df_features.fillna(0,inplace=True)
pca = PCA(n_components=5)
f=pca.fit(df_features)
print(f)

df_features.shape

df_features.to_csv('final_feature_matrix.csv')

